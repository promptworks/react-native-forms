#!/usr/bin/env node

const path = require("path");
const fs = require("fs-jetpack");
const prettier = require("prettier");
const { sortBy } = require("lodash");
const handlebars = require("handlebars");
const docgen = require("react-docgen-typescript");

/**
 * Define helper methods.
 */
handlebars.registerHelper({
  markdown(value) {
    return value.replace(/\|/g, "\\|").replace(/\n/g, "<br>");
  },
  anchor(value) {
    return `#${value.toLowerCase()}`;
  }
});

/**
 * Load the template.
 */
const source = fs.read("docs.hbs", "utf8");
const template = handlebars.compile(source, {
  noEscape: true
});

/**
 * Render the template.
 */
const render = component => {
  const props = sortBy(component.props, [
    prop => !prop.required,
    prop => prop.name
  ]);

  const output = template({ ...component, props });
  return prettier.format(output, { parser: "markdown" });
};

/**
 * Get the project root for a given file.
 */
const getProjectRoot = file => {
  const segments = file.split(path.sep);
  const srcIndex = segments.indexOf("src");
  return segments.slice(0, srcIndex).join(path.sep);
};

/**
 * Generate documentation for a file.
 */
const generate = file => {
  const root = getProjectRoot(file);
  const package = path.join(root, "package.json");
  const readme = path.join(root, "README.md");

  const markdown = render({
    components: docgen.parse(file),
    package: fs.read(package, "json")
  });

  fs.write(readme, markdown);
};

/**
 * Find sources and output documentation.
 */
const sources = fs.find("packages", {
  matching: "*/src/index.{ts,tsx}"
});

sources.forEach(generate);
